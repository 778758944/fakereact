{"map":"{\"version\":3,\"file\":\"DomDiff.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/DomDiff.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"// var diff = require(\"list-diff2\");\r\nimport { isReactElement } from \"./ReactElement\";\r\nimport diff from \"list-diff2\";\r\nexport var ChangeType;\r\n(function (ChangeType) {\r\n    ChangeType[ChangeType[\"REPLACE\"] = 0] = \"REPLACE\";\r\n    ChangeType[ChangeType[\"REORDER\"] = 1] = \"REORDER\";\r\n    ChangeType[ChangeType[\"PROPS\"] = 2] = \"PROPS\";\r\n    ChangeType[ChangeType[\"TEXT\"] = 3] = \"TEXT\";\r\n})(ChangeType || (ChangeType = {}));\r\n;\r\nexport var MoveType;\r\n(function (MoveType) {\r\n    MoveType[MoveType[\"REMOVE\"] = 0] = \"REMOVE\";\r\n    MoveType[MoveType[\"INSERT\"] = 1] = \"INSERT\";\r\n})(MoveType || (MoveType = {}));\r\n;\r\n/*\r\ninterface IdiffPatch {\r\n    [index: number]: Array<IChange>;\r\n}\r\n\nfunction isStringNode(node: ReactNode): node is string {\r\n    return typeof(node) === \"string\";\r\n}\r\n*/\r\nfunction diffProps(oldNode, newNode) {\r\n    var count = 0;\r\n    var oldProps = oldNode.props;\r\n    var newProps = newNode.props;\r\n    var key;\r\n    var propsPatches = {};\r\n    // todo 两次for in 循环是否有优化空间\r\n    for (key in oldProps) {\r\n        if (key !== \"children\") {\r\n            var oldVal = oldProps[key];\r\n            var newVal = newProps[key];\r\n            if (oldVal !== newVal) {\r\n                count++;\r\n                propsPatches[key] = newVal;\r\n            }\r\n        }\r\n    }\r\n    for (key in newProps) {\r\n        if (key !== \"children\") {\r\n            if (!oldProps.hasOwnProperty(key)) {\r\n                count++;\r\n                propsPatches[key] = newProps[key];\r\n            }\r\n        }\r\n    }\r\n    return count === 0 ? null : propsPatches;\r\n}\r\nfunction diffChildren(oldChildren, newChildren, currentPatch) {\r\n    var diffs = diff(oldChildren, newChildren, \"key\");\r\n    newChildren = diffs.children;\r\n    if (Array.isArray(diffs.moves)) {\r\n        var reorderPatch = {\r\n            type: ChangeType.REORDER,\r\n            moves: diffs.moves,\r\n            children: newChildren,\r\n        };\r\n        currentPatch.push(reorderPatch);\r\n    }\r\n}\r\nexport function dfsWalk(oldNode, newNode) {\r\n    var currentPatch = [];\r\n    if (!newNode) {\r\n    }\r\n    else if ((typeof oldNode === \"string\" || typeof oldNode === \"number\") && (typeof newNode === \"string\" || typeof newNode === \"number\")) {\r\n        if (oldNode !== newNode) {\r\n            var nodeChange = {\r\n                type: ChangeType.TEXT,\r\n                content: newNode\r\n            };\r\n            currentPatch.push(nodeChange);\r\n        }\r\n    }\r\n    else if (isReactElement(oldNode) && isReactElement(newNode)) {\r\n        if (oldNode.tagName === newNode.tagName) {\r\n            // 节点未变化\r\n            // 查看属性变更\r\n            var propsPatches = diffProps(oldNode, newNode);\r\n            propsPatches && currentPatch.push({\r\n                type: ChangeType.PROPS,\r\n                props: propsPatches,\r\n            });\r\n            diffChildren(oldNode.children, newNode.children, currentPatch);\r\n        }\r\n        else {\r\n            currentPatch.push({\r\n                type: ChangeType.REPLACE,\r\n                node: newNode,\r\n            });\r\n        }\r\n    }\r\n    else {\r\n        currentPatch.push({\r\n            type: ChangeType.REPLACE,\r\n        });\r\n    }\r\n    return currentPatch;\r\n}\r\n//# sourceMappingURL=DomDiff.js.map","dts":{"name":"/Users/tomxing/Documents/FakeReact/DomDiff.d.ts","writeByteOrderMark":false,"text":"import ReactElement, { ReactNode, ReactDomElement } from \"./ReactElement\";\r\nexport declare enum ChangeType {\r\n    REPLACE = 0,\r\n    REORDER = 1,\r\n    PROPS = 2,\r\n    TEXT = 3\r\n}\r\nexport declare enum MoveType {\r\n    REMOVE = 0,\r\n    INSERT = 1\r\n}\r\nexport interface IMove {\r\n    type: MoveType;\r\n    item?: ReactNode;\r\n    index: number;\r\n}\r\nexport interface IChange {\r\n    type: ChangeType;\r\n    content?: string | number;\r\n    props?: any;\r\n    newNode?: ReactElement<any>;\r\n    moves?: Array<IMove>;\r\n    node?: ReactElement<string>;\r\n    children?: ReactNode[];\r\n}\r\nexport declare function dfsWalk(oldNode: ReactDomElement, newNode: ReactDomElement): Array<IChange>;\r\n"}}
